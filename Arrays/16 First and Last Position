https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

class Solution {
public:
    int first_occurrence(vector<int> &nums,int target){
        int low=0,high=nums.size()-1,ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]>target)
                high=mid-1;
            else if(nums[mid]<target)
                low=mid+1;
            else{
                ans=mid;
                high=mid-1;
            }
        }
        return ans;
    }
    int last_occurrence(vector<int> &nums,int target){
        int low=0,high=nums.size()-1,ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]>target)
                high=mid-1;
            else if(nums[mid]<target)
                low=mid+1;
            else{
                ans=mid;
                low=mid+1;
            }
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> a;
        a.push_back(first_occurrence(nums,target));
        a.push_back(last_occurrence(nums,target));
        return a;
    }
};
